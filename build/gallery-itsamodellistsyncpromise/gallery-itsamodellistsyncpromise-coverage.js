if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js']) {
   __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'] = {"path":"build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0],"30":[0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":44},"end":{"line":1,"column":63}}},"2":{"name":"(anonymous_2)","line":116,"loc":{"start":{"line":116,"column":13},"end":{"line":116,"column":33}}},"3":{"name":"(anonymous_3)","line":140,"loc":{"start":{"line":140,"column":40},"end":{"line":140,"column":68}}},"4":{"name":"(anonymous_4)","line":143,"loc":{"start":{"line":143,"column":8},"end":{"line":143,"column":19}}},"5":{"name":"(anonymous_5)","line":147,"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":19}}},"6":{"name":"(anonymous_6)","line":158,"loc":{"start":{"line":158,"column":20},"end":{"line":158,"column":32}}},"7":{"name":"(anonymous_7)","line":172,"loc":{"start":{"line":172,"column":32},"end":{"line":172,"column":43}}},"8":{"name":"(anonymous_8)","line":175,"loc":{"start":{"line":175,"column":32},"end":{"line":175,"column":43}}},"9":{"name":"(anonymous_9)","line":182,"loc":{"start":{"line":182,"column":84},"end":{"line":182,"column":95}}},"10":{"name":"(anonymous_10)","line":185,"loc":{"start":{"line":185,"column":88},"end":{"line":185,"column":99}}},"11":{"name":"(anonymous_11)","line":451,"loc":{"start":{"line":451,"column":4},"end":{"line":451,"column":17}}},"12":{"name":"(anonymous_12)","line":452,"loc":{"start":{"line":452,"column":35},"end":{"line":452,"column":63}}},"13":{"name":"(anonymous_13)","line":459,"loc":{"start":{"line":459,"column":16},"end":{"line":459,"column":35}}},"14":{"name":"(anonymous_14)","line":462,"loc":{"start":{"line":462,"column":16},"end":{"line":462,"column":30}}},"15":{"name":"(anonymous_15)","line":469,"loc":{"start":{"line":469,"column":43},"end":{"line":469,"column":62}}},"16":{"name":"(anonymous_16)","line":481,"loc":{"start":{"line":481,"column":43},"end":{"line":481,"column":54}}},"17":{"name":"(anonymous_17)","line":502,"loc":{"start":{"line":502,"column":38},"end":{"line":502,"column":62}}},"18":{"name":"(anonymous_18)","line":520,"loc":{"start":{"line":520,"column":38},"end":{"line":520,"column":62}}},"19":{"name":"(anonymous_19)","line":524,"loc":{"start":{"line":524,"column":28},"end":{"line":524,"column":55}}},"20":{"name":"(anonymous_20)","line":541,"loc":{"start":{"line":541,"column":8},"end":{"line":541,"column":29}}},"21":{"name":"(anonymous_21)","line":576,"loc":{"start":{"line":576,"column":44},"end":{"line":576,"column":56}}},"22":{"name":"(anonymous_22)","line":582,"loc":{"start":{"line":582,"column":8},"end":{"line":582,"column":24}}},"23":{"name":"(anonymous_23)","line":588,"loc":{"start":{"line":588,"column":8},"end":{"line":588,"column":27}}},"24":{"name":"(anonymous_24)","line":591,"loc":{"start":{"line":591,"column":8},"end":{"line":591,"column":22}}},"25":{"name":"(anonymous_25)","line":639,"loc":{"start":{"line":639,"column":4},"end":{"line":639,"column":24}}},"26":{"name":"(anonymous_26)","line":640,"loc":{"start":{"line":640,"column":48},"end":{"line":640,"column":61}}},"27":{"name":"(anonymous_27)","line":646,"loc":{"start":{"line":646,"column":22},"end":{"line":646,"column":36}}},"28":{"name":"(anonymous_28)","line":655,"loc":{"start":{"line":655,"column":26},"end":{"line":655,"column":45}}},"29":{"name":"(anonymous_29)","line":682,"loc":{"start":{"line":682,"column":49},"end":{"line":682,"column":74}}},"30":{"name":"(anonymous_30)","line":717,"loc":{"start":{"line":717,"column":35},"end":{"line":717,"column":47}}},"31":{"name":"(anonymous_31)","line":722,"loc":{"start":{"line":722,"column":8},"end":{"line":722,"column":24}}},"32":{"name":"(anonymous_32)","line":730,"loc":{"start":{"line":730,"column":8},"end":{"line":730,"column":27}}},"33":{"name":"(anonymous_33)","line":733,"loc":{"start":{"line":733,"column":8},"end":{"line":733,"column":22}}},"34":{"name":"(anonymous_34)","line":757,"loc":{"start":{"line":757,"column":37},"end":{"line":757,"column":49}}},"35":{"name":"(anonymous_35)","line":763,"loc":{"start":{"line":763,"column":8},"end":{"line":763,"column":24}}},"36":{"name":"(anonymous_36)","line":771,"loc":{"start":{"line":771,"column":8},"end":{"line":771,"column":27}}},"37":{"name":"(anonymous_37)","line":774,"loc":{"start":{"line":774,"column":8},"end":{"line":774,"column":22}}},"38":{"name":"(anonymous_38)","line":789,"loc":{"start":{"line":789,"column":43},"end":{"line":789,"column":60}}},"39":{"name":"(anonymous_39)","line":871,"loc":{"start":{"line":871,"column":37},"end":{"line":871,"column":58}}},"40":{"name":"(anonymous_40)","line":879,"loc":{"start":{"line":879,"column":39},"end":{"line":879,"column":58}}},"41":{"name":"(anonymous_41)","line":881,"loc":{"start":{"line":881,"column":22},"end":{"line":881,"column":38}}},"42":{"name":"(anonymous_42)","line":885,"loc":{"start":{"line":885,"column":53},"end":{"line":885,"column":65}}},"43":{"name":"(anonymous_43)","line":924,"loc":{"start":{"line":924,"column":68},"end":{"line":924,"column":86}}},"44":{"name":"(anonymous_44)","line":927,"loc":{"start":{"line":927,"column":60},"end":{"line":927,"column":72}}},"45":{"name":"(anonymous_45)","line":950,"loc":{"start":{"line":950,"column":30},"end":{"line":950,"column":48}}},"46":{"name":"(anonymous_46)","line":954,"loc":{"start":{"line":954,"column":8},"end":{"line":954,"column":25}}},"47":{"name":"(anonymous_47)","line":963,"loc":{"start":{"line":963,"column":23},"end":{"line":963,"column":39}}},"48":{"name":"(anonymous_48)","line":980,"loc":{"start":{"line":980,"column":34},"end":{"line":980,"column":46}}},"49":{"name":"(anonymous_49)","line":996,"loc":{"start":{"line":996,"column":43},"end":{"line":996,"column":69}}},"50":{"name":"(anonymous_50)","line":1002,"loc":{"start":{"line":1002,"column":36},"end":{"line":1002,"column":63}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1026,"column":3}},"2":{"start":{"line":21,"column":3},"end":{"line":130,"column":6}},"3":{"start":{"line":117,"column":8},"end":{"line":128,"column":9}},"4":{"start":{"line":118,"column":12},"end":{"line":127,"column":13}},"5":{"start":{"line":119,"column":16},"end":{"line":119,"column":46}},"6":{"start":{"line":121,"column":16},"end":{"line":125,"column":19}},"7":{"start":{"line":126,"column":16},"end":{"line":126,"column":26}},"8":{"start":{"line":129,"column":8},"end":{"line":129,"column":30}},"9":{"start":{"line":140,"column":0},"end":{"line":193,"column":2}},"10":{"start":{"line":141,"column":4},"end":{"line":141,"column":24}},"11":{"start":{"line":142,"column":4},"end":{"line":192,"column":6}},"12":{"start":{"line":144,"column":12},"end":{"line":144,"column":53}},"13":{"start":{"line":149,"column":12},"end":{"line":149,"column":111}},"14":{"start":{"line":150,"column":12},"end":{"line":150,"column":138}},"15":{"start":{"line":152,"column":12},"end":{"line":190,"column":13}},"16":{"start":{"line":154,"column":16},"end":{"line":154,"column":80}},"17":{"start":{"line":156,"column":16},"end":{"line":181,"column":18}},"18":{"start":{"line":159,"column":24},"end":{"line":164,"column":55}},"19":{"start":{"line":165,"column":24},"end":{"line":179,"column":25}},"20":{"start":{"line":166,"column":28},"end":{"line":166,"column":69}},"21":{"start":{"line":167,"column":28},"end":{"line":170,"column":45}},"22":{"start":{"line":171,"column":28},"end":{"line":178,"column":30}},"23":{"start":{"line":173,"column":36},"end":{"line":173,"column":81}},"24":{"start":{"line":176,"column":36},"end":{"line":176,"column":81}},"25":{"start":{"line":182,"column":16},"end":{"line":184,"column":19}},"26":{"start":{"line":183,"column":20},"end":{"line":183,"column":59}},"27":{"start":{"line":185,"column":16},"end":{"line":187,"column":19}},"28":{"start":{"line":186,"column":20},"end":{"line":186,"column":59}},"29":{"start":{"line":449,"column":0},"end":{"line":473,"column":2}},"30":{"start":{"line":452,"column":8},"end":{"line":468,"column":10}},"31":{"start":{"line":453,"column":12},"end":{"line":454,"column":24}},"32":{"start":{"line":458,"column":12},"end":{"line":465,"column":14}},"33":{"start":{"line":460,"column":20},"end":{"line":460,"column":45}},"34":{"start":{"line":463,"column":20},"end":{"line":463,"column":34}},"35":{"start":{"line":467,"column":12},"end":{"line":467,"column":28}},"36":{"start":{"line":469,"column":8},"end":{"line":471,"column":10}},"37":{"start":{"line":470,"column":12},"end":{"line":470,"column":52}},"38":{"start":{"line":481,"column":0},"end":{"line":489,"column":2}},"39":{"start":{"line":482,"column":4},"end":{"line":482,"column":24}},"40":{"start":{"line":484,"column":4},"end":{"line":484,"column":76}},"41":{"start":{"line":485,"column":4},"end":{"line":485,"column":92}},"42":{"start":{"line":486,"column":4},"end":{"line":486,"column":92}},"43":{"start":{"line":488,"column":4},"end":{"line":488,"column":41}},"44":{"start":{"line":502,"column":0},"end":{"line":509,"column":2}},"45":{"start":{"line":503,"column":4},"end":{"line":503,"column":24}},"46":{"start":{"line":505,"column":4},"end":{"line":505,"column":64}},"47":{"start":{"line":506,"column":4},"end":{"line":506,"column":77}},"48":{"start":{"line":508,"column":4},"end":{"line":508,"column":20}},"49":{"start":{"line":520,"column":0},"end":{"line":558,"column":2}},"50":{"start":{"line":521,"column":4},"end":{"line":522,"column":61}},"51":{"start":{"line":524,"column":4},"end":{"line":527,"column":7}},"52":{"start":{"line":525,"column":8},"end":{"line":525,"column":33}},"53":{"start":{"line":526,"column":8},"end":{"line":526,"column":31}},"54":{"start":{"line":530,"column":4},"end":{"line":537,"column":6}},"55":{"start":{"line":539,"column":4},"end":{"line":544,"column":6}},"56":{"start":{"line":542,"column":12},"end":{"line":542,"column":38}},"57":{"start":{"line":546,"column":4},"end":{"line":554,"column":82}},"58":{"start":{"line":556,"column":4},"end":{"line":556,"column":38}},"59":{"start":{"line":557,"column":4},"end":{"line":557,"column":19}},"60":{"start":{"line":576,"column":0},"end":{"line":596,"column":2}},"61":{"start":{"line":577,"column":4},"end":{"line":579,"column":28}},"62":{"start":{"line":581,"column":4},"end":{"line":585,"column":6}},"63":{"start":{"line":583,"column":12},"end":{"line":583,"column":60}},"64":{"start":{"line":586,"column":4},"end":{"line":594,"column":6}},"65":{"start":{"line":589,"column":12},"end":{"line":589,"column":39}},"66":{"start":{"line":592,"column":12},"end":{"line":592,"column":44}},"67":{"start":{"line":595,"column":4},"end":{"line":595,"column":21}},"68":{"start":{"line":637,"column":0},"end":{"line":694,"column":2}},"69":{"start":{"line":640,"column":8},"end":{"line":692,"column":10}},"70":{"start":{"line":641,"column":12},"end":{"line":644,"column":37}},"71":{"start":{"line":646,"column":12},"end":{"line":654,"column":14}},"72":{"start":{"line":647,"column":16},"end":{"line":651,"column":18}},"73":{"start":{"line":652,"column":16},"end":{"line":652,"column":53}},"74":{"start":{"line":653,"column":16},"end":{"line":653,"column":48}},"75":{"start":{"line":655,"column":12},"end":{"line":673,"column":14}},"76":{"start":{"line":656,"column":16},"end":{"line":656,"column":27}},"77":{"start":{"line":657,"column":16},"end":{"line":657,"column":38}},"78":{"start":{"line":658,"column":16},"end":{"line":658,"column":42}},"79":{"start":{"line":659,"column":16},"end":{"line":662,"column":17}},"80":{"start":{"line":661,"column":20},"end":{"line":661,"column":49}},"81":{"start":{"line":663,"column":16},"end":{"line":663,"column":34}},"82":{"start":{"line":666,"column":16},"end":{"line":671,"column":17}},"83":{"start":{"line":667,"column":20},"end":{"line":667,"column":50}},"84":{"start":{"line":670,"column":20},"end":{"line":670,"column":52}},"85":{"start":{"line":672,"column":16},"end":{"line":672,"column":43}},"86":{"start":{"line":674,"column":12},"end":{"line":690,"column":13}},"87":{"start":{"line":676,"column":16},"end":{"line":679,"column":18}},"88":{"start":{"line":682,"column":16},"end":{"line":689,"column":19}},"89":{"start":{"line":683,"column":20},"end":{"line":688,"column":21}},"90":{"start":{"line":684,"column":24},"end":{"line":684,"column":37}},"91":{"start":{"line":687,"column":24},"end":{"line":687,"column":46}},"92":{"start":{"line":691,"column":12},"end":{"line":691,"column":29}},"93":{"start":{"line":717,"column":0},"end":{"line":738,"column":2}},"94":{"start":{"line":718,"column":4},"end":{"line":720,"column":28}},"95":{"start":{"line":721,"column":4},"end":{"line":727,"column":6}},"96":{"start":{"line":723,"column":12},"end":{"line":725,"column":13}},"97":{"start":{"line":724,"column":16},"end":{"line":724,"column":58}},"98":{"start":{"line":728,"column":4},"end":{"line":736,"column":6}},"99":{"start":{"line":731,"column":12},"end":{"line":731,"column":39}},"100":{"start":{"line":734,"column":12},"end":{"line":734,"column":44}},"101":{"start":{"line":737,"column":4},"end":{"line":737,"column":21}},"102":{"start":{"line":757,"column":0},"end":{"line":779,"column":2}},"103":{"start":{"line":758,"column":4},"end":{"line":760,"column":28}},"104":{"start":{"line":762,"column":4},"end":{"line":768,"column":6}},"105":{"start":{"line":765,"column":12},"end":{"line":765,"column":81}},"106":{"start":{"line":769,"column":4},"end":{"line":777,"column":6}},"107":{"start":{"line":772,"column":12},"end":{"line":772,"column":39}},"108":{"start":{"line":775,"column":12},"end":{"line":775,"column":44}},"109":{"start":{"line":778,"column":4},"end":{"line":778,"column":21}},"110":{"start":{"line":789,"column":0},"end":{"line":799,"column":2}},"111":{"start":{"line":790,"column":4},"end":{"line":790,"column":24}},"112":{"start":{"line":793,"column":4},"end":{"line":797,"column":5}},"113":{"start":{"line":794,"column":8},"end":{"line":796,"column":11}},"114":{"start":{"line":798,"column":4},"end":{"line":798,"column":33}},"115":{"start":{"line":871,"column":0},"end":{"line":967,"column":2}},"116":{"start":{"line":872,"column":4},"end":{"line":873,"column":50}},"117":{"start":{"line":876,"column":4},"end":{"line":876,"column":58}},"118":{"start":{"line":877,"column":4},"end":{"line":877,"column":60}},"119":{"start":{"line":879,"column":4},"end":{"line":879,"column":74}},"120":{"start":{"line":879,"column":60},"end":{"line":879,"column":70}},"121":{"start":{"line":881,"column":4},"end":{"line":961,"column":6}},"122":{"start":{"line":882,"column":8},"end":{"line":883,"column":24}},"123":{"start":{"line":885,"column":8},"end":{"line":960,"column":11}},"124":{"start":{"line":886,"column":12},"end":{"line":895,"column":14}},"125":{"start":{"line":896,"column":12},"end":{"line":896,"column":38}},"126":{"start":{"line":898,"column":12},"end":{"line":900,"column":26}},"127":{"start":{"line":902,"column":16},"end":{"line":902,"column":46}},"128":{"start":{"line":903,"column":16},"end":{"line":903,"column":52}},"129":{"start":{"line":905,"column":12},"end":{"line":905,"column":44}},"130":{"start":{"line":906,"column":12},"end":{"line":914,"column":13}},"131":{"start":{"line":907,"column":16},"end":{"line":913,"column":17}},"132":{"start":{"line":908,"column":20},"end":{"line":912,"column":21}},"133":{"start":{"line":909,"column":24},"end":{"line":909,"column":60}},"134":{"start":{"line":916,"column":12},"end":{"line":919,"column":13}},"135":{"start":{"line":917,"column":16},"end":{"line":917,"column":63}},"136":{"start":{"line":918,"column":16},"end":{"line":918,"column":69}},"137":{"start":{"line":923,"column":12},"end":{"line":952,"column":19}},"138":{"start":{"line":925,"column":20},"end":{"line":925,"column":33}},"139":{"start":{"line":931,"column":20},"end":{"line":931,"column":46}},"140":{"start":{"line":932,"column":20},"end":{"line":940,"column":21}},"141":{"start":{"line":933,"column":24},"end":{"line":939,"column":25}},"142":{"start":{"line":934,"column":28},"end":{"line":938,"column":29}},"143":{"start":{"line":935,"column":32},"end":{"line":935,"column":68}},"144":{"start":{"line":942,"column":20},"end":{"line":946,"column":21}},"145":{"start":{"line":943,"column":24},"end":{"line":945,"column":25}},"146":{"start":{"line":944,"column":28},"end":{"line":944,"column":35}},"147":{"start":{"line":951,"column":20},"end":{"line":951,"column":33}},"148":{"start":{"line":955,"column":12},"end":{"line":958,"column":14}},"149":{"start":{"line":959,"column":12},"end":{"line":959,"column":49}},"150":{"start":{"line":963,"column":4},"end":{"line":965,"column":6}},"151":{"start":{"line":964,"column":8},"end":{"line":964,"column":40}},"152":{"start":{"line":966,"column":4},"end":{"line":966,"column":22}},"153":{"start":{"line":980,"column":0},"end":{"line":982,"column":2}},"154":{"start":{"line":981,"column":4},"end":{"line":981,"column":51}},"155":{"start":{"line":996,"column":0},"end":{"line":1008,"column":2}},"156":{"start":{"line":997,"column":4},"end":{"line":998,"column":22}},"157":{"start":{"line":1000,"column":4},"end":{"line":1000,"column":56}},"158":{"start":{"line":1001,"column":4},"end":{"line":1006,"column":5}},"159":{"start":{"line":1002,"column":8},"end":{"line":1005,"column":11}},"160":{"start":{"line":1003,"column":12},"end":{"line":1003,"column":118}},"161":{"start":{"line":1004,"column":12},"end":{"line":1004,"column":44}},"162":{"start":{"line":1007,"column":4},"end":{"line":1007,"column":23}},"163":{"start":{"line":1011,"column":0},"end":{"line":1011,"column":79}}},"branchMap":{"1":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"2":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":15},"end":{"line":129,"column":23}},{"start":{"line":129,"column":27},"end":{"line":129,"column":29}}]},"3":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":13},"end":{"line":149,"column":53}},{"start":{"line":149,"column":59},"end":{"line":149,"column":109}}]},"4":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":12},"end":{"line":150,"column":29}},{"start":{"line":150,"column":35},"end":{"line":150,"column":79}},{"start":{"line":150,"column":85},"end":{"line":150,"column":135}}]},"5":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":12},"end":{"line":152,"column":12}},{"start":{"line":152,"column":12},"end":{"line":152,"column":12}}]},"6":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":16},"end":{"line":154,"column":45}},{"start":{"line":154,"column":49},"end":{"line":154,"column":79}}]},"7":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":37},"end":{"line":160,"column":51}},{"start":{"line":160,"column":55},"end":{"line":160,"column":70}}]},"8":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":38},"end":{"line":163,"column":50}},{"start":{"line":163,"column":54},"end":{"line":163,"column":66}}]},"9":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":24},"end":{"line":165,"column":24}},{"start":{"line":165,"column":24},"end":{"line":165,"column":24}}]},"10":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":29},"end":{"line":165,"column":46}},{"start":{"line":165,"column":51},"end":{"line":165,"column":57}}]},"11":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":46},"end":{"line":168,"column":59}},{"start":{"line":168,"column":64},"end":{"line":168,"column":76}},{"start":{"line":168,"column":80},"end":{"line":168,"column":101}},{"start":{"line":168,"column":106},"end":{"line":168,"column":154}}]},"12":{"line":458,"type":"binary-expr","locations":[{"start":{"line":458,"column":13},"end":{"line":458,"column":50}},{"start":{"line":458,"column":55},"end":{"line":458,"column":63}},{"start":{"line":458,"column":67},"end":{"line":465,"column":13}}]},"13":{"line":484,"type":"binary-expr","locations":[{"start":{"line":484,"column":4},"end":{"line":484,"column":33}},{"start":{"line":484,"column":37},"end":{"line":484,"column":75}}]},"14":{"line":485,"type":"binary-expr","locations":[{"start":{"line":485,"column":4},"end":{"line":485,"column":41}},{"start":{"line":485,"column":45},"end":{"line":485,"column":91}}]},"15":{"line":486,"type":"binary-expr","locations":[{"start":{"line":486,"column":4},"end":{"line":486,"column":41}},{"start":{"line":486,"column":45},"end":{"line":486,"column":91}}]},"16":{"line":505,"type":"binary-expr","locations":[{"start":{"line":505,"column":4},"end":{"line":505,"column":29}},{"start":{"line":505,"column":34},"end":{"line":505,"column":62}}]},"17":{"line":506,"type":"binary-expr","locations":[{"start":{"line":506,"column":4},"end":{"line":506,"column":31}},{"start":{"line":506,"column":36},"end":{"line":506,"column":75}}]},"18":{"line":539,"type":"binary-expr","locations":[{"start":{"line":539,"column":4},"end":{"line":539,"column":26}},{"start":{"line":539,"column":30},"end":{"line":544,"column":5}}]},"19":{"line":546,"type":"binary-expr","locations":[{"start":{"line":546,"column":4},"end":{"line":546,"column":28}},{"start":{"line":546,"column":33},"end":{"line":554,"column":80}}]},"20":{"line":642,"type":"cond-expr","locations":[{"start":{"line":642,"column":54},"end":{"line":642,"column":64}},{"start":{"line":642,"column":67},"end":{"line":642,"column":71}}]},"21":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":16},"end":{"line":659,"column":16}},{"start":{"line":659,"column":16},"end":{"line":659,"column":16}}]},"22":{"line":666,"type":"if","locations":[{"start":{"line":666,"column":16},"end":{"line":666,"column":16}},{"start":{"line":666,"column":16},"end":{"line":666,"column":16}}]},"23":{"line":666,"type":"binary-expr","locations":[{"start":{"line":666,"column":21},"end":{"line":666,"column":43}},{"start":{"line":666,"column":48},"end":{"line":666,"column":62}}]},"24":{"line":674,"type":"if","locations":[{"start":{"line":674,"column":12},"end":{"line":674,"column":12}},{"start":{"line":674,"column":12},"end":{"line":674,"column":12}}]},"25":{"line":683,"type":"if","locations":[{"start":{"line":683,"column":20},"end":{"line":683,"column":20}},{"start":{"line":683,"column":20},"end":{"line":683,"column":20}}]},"26":{"line":723,"type":"if","locations":[{"start":{"line":723,"column":12},"end":{"line":723,"column":12}},{"start":{"line":723,"column":12},"end":{"line":723,"column":12}}]},"27":{"line":765,"type":"binary-expr","locations":[{"start":{"line":765,"column":12},"end":{"line":765,"column":31}},{"start":{"line":765,"column":35},"end":{"line":765,"column":80}}]},"28":{"line":793,"type":"if","locations":[{"start":{"line":793,"column":4},"end":{"line":793,"column":4}},{"start":{"line":793,"column":4},"end":{"line":793,"column":4}}]},"29":{"line":876,"type":"binary-expr","locations":[{"start":{"line":876,"column":4},"end":{"line":876,"column":8}},{"start":{"line":876,"column":13},"end":{"line":876,"column":31}},{"start":{"line":876,"column":36},"end":{"line":876,"column":57}}]},"30":{"line":877,"type":"binary-expr","locations":[{"start":{"line":877,"column":4},"end":{"line":877,"column":8}},{"start":{"line":877,"column":13},"end":{"line":877,"column":31}},{"start":{"line":877,"column":36},"end":{"line":877,"column":59}}]},"31":{"line":905,"type":"binary-expr","locations":[{"start":{"line":905,"column":23},"end":{"line":905,"column":31}},{"start":{"line":905,"column":35},"end":{"line":905,"column":43}}]},"32":{"line":906,"type":"if","locations":[{"start":{"line":906,"column":12},"end":{"line":906,"column":12}},{"start":{"line":906,"column":12},"end":{"line":906,"column":12}}]},"33":{"line":916,"type":"if","locations":[{"start":{"line":916,"column":12},"end":{"line":916,"column":12}},{"start":{"line":916,"column":12},"end":{"line":916,"column":12}}]},"34":{"line":916,"type":"binary-expr","locations":[{"start":{"line":916,"column":16},"end":{"line":916,"column":34}},{"start":{"line":916,"column":38},"end":{"line":916,"column":57}}]},"35":{"line":923,"type":"cond-expr","locations":[{"start":{"line":924,"column":16},"end":{"line":926,"column":18}},{"start":{"line":927,"column":16},"end":{"line":952,"column":18}}]},"36":{"line":932,"type":"if","locations":[{"start":{"line":932,"column":20},"end":{"line":932,"column":20}},{"start":{"line":932,"column":20},"end":{"line":932,"column":20}}]},"37":{"line":942,"type":"if","locations":[{"start":{"line":942,"column":20},"end":{"line":942,"column":20}},{"start":{"line":942,"column":20},"end":{"line":942,"column":20}}]},"38":{"line":956,"type":"binary-expr","locations":[{"start":{"line":956,"column":27},"end":{"line":956,"column":33}},{"start":{"line":956,"column":38},"end":{"line":956,"column":52}},{"start":{"line":956,"column":56},"end":{"line":956,"column":62}}]},"39":{"line":1001,"type":"if","locations":[{"start":{"line":1001,"column":4},"end":{"line":1001,"column":4}},{"start":{"line":1001,"column":4},"end":{"line":1001,"column":4}}]}},"code":["(function () { YUI.add('gallery-itsamodellistsyncpromise', function (Y, NAME) {","","'use strict';","","/*jshint maxlen:205 */","","/**"," *"," * This module extends Y.ModelList by introducing Promised sync-methods. It also transforms Y.ModelList's sync-events into true events"," * with a defaultFunc which can be prevented. This means the 'on'-events will be fired before syncing and the 'after'-events after syncing."," *"," * @module gallery-itsamodellistsyncpromise"," * @class Y.ModelList"," * @constructor"," * @since 0.1"," *"," * <i>Copyright (c) 2013 Marco Asbreuk - http://itsasbreuk.nl</i>"," * YUI BSD License - http://developer.yahoo.com/yui/license.html"," *","*/","   var YModelList = Y.ModelList,","       Lang = Y.Lang,","       YArray = Y.Array,","       YObject = Y.Object,","       PUBLISHED = '_pub_',","       READ = 'read',","       APPEND = 'append',","       DELETE = 'delete',","       READAPPEND = READ+APPEND,","       MODELSYNC = 'modelsync',","       GALLERY_ITSA = 'gallery-itsa',","       GALLERYITSAMODELSYNCPROMISE = GALLERY_ITSA+MODELSYNC+'promise',","       AVAILABLESYNCMESSAGES = {","           load: true,","           save: true,","           submit: true,","           destroy: true","       },","       DEFFN = '_defFn_',","   /**","     * Fired when an error occurs, such as when an attribute (or property) doesn't validate or when","     * the sync layer submit-function returns an error.","     * @event error","     * @param e {EventFacade} Event Facade including:","     * @param e.error {any} Error message.","     * @param e.src {String} Source of the error. May be one of the following (or any","     *                     custom error source defined by a Model subclass):","     *","     * `submit`: An error submitting the model from within a sync layer.","     *","     * `attributevalidation`: An error validating an attribute (or property). The attribute (or objectproperty)","     *                        that failed validation will be provided as the `attribute` property on the event facade.","     *","     * @param e.attribute {String} The attribute/property that failed validation.","     * @param e.validationerror {String} The errormessage in case of attribute-validation error.","    **/","    ERROR = 'error',","","    /**","     * Fired when all changed models of the modellist are saved through the Model-sync layer.","     * @event save","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SAVE = 'save',","","   /**","     * Fired when models are submitted through the Model-sync layer.","     * @event submit","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SUBMIT = 'submit',","","   /**","     * Fired when models are read from the ModelList-sync layer.","     * @event load","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOAD = 'load',","","   /**","     * Fired when models are appended to the ModelList by the ModelList-sync layer.","     * @event loadappend","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOADAPPEND = LOAD+APPEND,","","   /**","     * Fired when models are destroyed from the ModelList-sync layer.","     * @event destroymodels","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    DESTROY = 'destroy',","    DESTROYMODELS = DESTROY+'models',","    PROMISE = 'Promise',","","    PARSED = function (response) {","        if (typeof response === 'string') {","            try {","                return Y.JSON.parse(response);","            } catch (ex) {","                this.fire(ERROR, {","                    error   : ex,","                    response: response,","                    src     : 'parse'","                });","                return {};","            }","        }","        return response || {};","    };","","/**"," * Makes sync-messages to target the specified messageViewer. You can only target to 1 MessageViewer at the same time.<br>"," * See gallery-itsamessageviewer for more info."," *"," * @method addMessageTarget"," * @param itsamessageviewer {Y.ITSAMessageViewer|Y.ITSAPanel}"," * @since 0.4","*/","YModelList.prototype.addMessageTarget = function(itsamessageviewer) {","    var instance = this;","    Y.usePromise(GALLERY_ITSA+'messagecontroller', GALLERY_ITSA+'messageviewer', GALLERY_ITSA+'panel', GALLERY_ITSA+'viewmodel').then(","        function() {","            return Y.ITSAMessageController.isReady();","        }","    ).then(","        function() {","/*jshint expr:true */","            (itsamessageviewer instanceof Y.ITSAPanel) && (itsamessageviewer=itsamessageviewer._itsastatusbar);","            itsamessageviewer || ((itsamessageviewer instanceof Y.ITSAViewModel) && (itsamessageviewer=itsamessageviewer._itsastatusbar));","/*jshint expr:false */","            if (itsamessageviewer instanceof Y.ITSAMessageViewer) {","/*jshint expr:true */","                instance._itsamessageListener && instance.removeMessageTarget();","/*jshint expr:false */","                instance._itsamessageListener = instance.on(","                    [LOAD, SUBMIT, SAVE, DESTROY],","                    function(e) {","                        var options = e.options,","                            remove = options.remove || options[DELETE],","                            type = e.type,","                            typesplit = type.split(':'),","                            subtype = typesplit[1] || typesplit[0],","                            statushandle, syncMessages;","                        if ((subtype!==DESTROY) || remove) {","                            syncMessages = instance._defSyncMessages;","                            statushandle = itsamessageviewer.showStatus(","                                              e.syncmessage || (syncMessages && syncMessages[subtype]) || Y.Intl.get(GALLERYITSAMODELSYNCPROMISE)[subtype],","                                              {source: MODELSYNC, busy: true}","                                           );","                            e.promise.then(","                                function() {","                                    itsamessageviewer.removeStatus(statushandle);","                                },","                                function() {","                                    itsamessageviewer.removeStatus(statushandle);","                                }","                            );","                        }","                    }","                );","                instance._itsamessagedestroylistener1 = instance.onceAfter(DESTROY, function() {","                    instance._itsamessageListener.detach();","                });","                instance._itsamessagedestroylistener2 = itsamessageviewer.once(DESTROY, function() {","                    instance._itsamessageListener.detach();","                });","            }","            else {","            }","        }","    );","};","","/**","  * Destroys this model instance and removes it from its containing lists, if any. The 'callback', if one is provided,","  * will be called after the model is destroyed.<br /><br />","  * If `options.remove` is `true`, then this method delegates to the `sync()` method to delete the model from the persistence layer, which is an","  * asynchronous action. In this case, the 'callback' (if provided) will be called after the sync layer indicates success or failure of the delete operation.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>destroyPromise()</b>.<br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method destroymodels","  * @param {Object} [options] Sync options. It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed.","  *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious destruction. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called after the model has been destroyed (and deleted via the sync layer if `options.remove` is `true`).","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. Otherwise 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable","*/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * If `options.remove` is `true`, then this method delegates to the `sync()`"," * method to delete the model from the persistence layer, which is an"," * asynchronous action."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroymodelsPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious destruction. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * Deprecated, use destroyModelsPromise instead (as long as available both methods ect the same)."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroyPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message)."," * @deprecated","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method load","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method loadappend","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadappendPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**"," * Saves this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method save"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during saving destruction. Will overrule the default message. See gallery-itsamessageviewer."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Saves this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method savePromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious saving. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Submits this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submit"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronous submission. Will overrule the default message. See gallery-itsamessageviewer."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Submits this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submitPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronous submission. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","YArray.each(","    [LOAD, LOADAPPEND, SAVE, SUBMIT, DESTROYMODELS],","    function(Fn) {","        YModelList.prototype[Fn] = function(options, callback) {","            var instance = this,","                promise;","","            // by overwriting the default 'save'-method we manage to fire 'destroystart'-event.","        /*jshint expr:true */","            (promise=instance[Fn+PROMISE](options)) && callback && promise.then(","                function(response) {","                    callback(null, response);","                },","                function(err) {","                    callback(err);","                }","            );","        /*jshint expr:false */","            return instance;","        };","        YModelList.prototype[Fn+PROMISE] = function (options) {","            return this._createPromise(Fn, options);","        };","    }",");","","/**"," * Removes the messageViewer-target that was set up by addMessageTarget()."," *"," * @method removeMessageTarget"," * @since 0.1","*/","YModelList.prototype.removeMessageTarget = function() {","    var instance = this;","/*jshint expr:true */","    instance._itsamessageListener && instance._itsamessageListener.detach();","    instance._itsamessagedestroylistener1 && instance._itsamessagedestroylistener1.detach();","    instance._itsamessagedestroylistener2 && instance._itsamessagedestroylistener2.detach();","/*jshint expr:false */","    instance._itsamessageListener = null;","};","","/**"," * Defines the syncmessage to be used when calling the synclayer. When not defined (and not declared during calling the syncmethod by 'options.syncmessage'),"," * a default i18n-message will be used."," * See gallery-itsamessageviewer for more info about syncmessages."," *"," * @method setSyncMessage"," * @param type {String} the syncaction = 'load'|'save'|destroy'|'submit'"," * @param message {String} the syncmessage that should be viewed by a Y.ITSAMessageViewer"," * @chainable"," * @since 0.4","*/","YModelList.prototype.setSyncMessage = function(type, message) {","    var instance = this;","/*jshint expr:true */","    instance._defSyncMessages || (instance._defSyncMessages={});","    AVAILABLESYNCMESSAGES[type] && (instance._defSyncMessages[type]=message);","/*jshint expr:false */","    return instance;","};","","/**"," * Private function that creates the promises for all promise-events"," *"," * @method _createPromise"," * @param type {String} Method to create a promise for"," * @param options {Object} options to be send with the event"," * @private"," * @since 0.3","*/","YModelList.prototype._createPromise = function(type, options) {","    var instance = this,","        promise, promiseResolve, promiseReject, extraOptions;","","    promise = new Y.Promise(function (resolve, reject) {","        promiseResolve = resolve;","        promiseReject = reject;","    });","    // we pass the promise, together with the resolve and reject handlers as an option to the event.","    // this way we can fullfill the promise in the defaultFn or prevDefaultFn.","    extraOptions = {","        promise: promise,","        promiseResolve: promiseResolve,","        promiseReject: promiseReject,","        response: '', // making available at the after listener","        parsed: {}, // making available at the after listener","        options: Y.merge(options) // making passing only optins to other events possible","    };","/*jshint expr:true */","    Lang.isObject(options) && YObject.each(","        options,","        function(value, key) {","            extraOptions[key] = value;","        }","    );","    // lazy publish the event","    instance[PUBLISHED+type] || (instance[PUBLISHED+type]=instance._publishAsync(type,","                                                                                {","                                                                                  defaultTargetOnly: true,","                                                                                  emitFacade: true,","                                                                                  broadcast: 1,","                                                                                  defaultFn: instance[DEFFN+type],","                                                                                  preventedFn: instance._prevDefFn","                                                                                }","                                                                               ));","/*jshint expr:false */","    instance.fire(type, extraOptions);","    return promise;","};","","/**"," * Destroys all models within this modellist."," * <b>Caution:</b> The current version uses the Model's synclayer, NOT ModelList's synclayer."," *"," * This method delegates to the Model's`sync()` method to perform the actual destroy"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful destroy operation will fire an `error` event with the `src` value \"destroy\"."," *"," * @method _defFn_destroymodels"," * @private"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+DESTROYMODELS] = function(e) {","    var instance = this,","        destroylist = [],","        options = e.options;","","    instance.each(","        function(model) {","            destroylist.push(model.destroyPromise(options));","        }","    );","    Y.batch.apply(Y, destroylist).then(","//            Y.Promise.every(destroylist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be retained: new will be added.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'readappend' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"loadappend\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_loadappend"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be replaced. Use loadappendPromise to append the items.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'read' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_load"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YArray.each(","    [LOAD, LOADAPPEND],","    function(eventType) {","        YModelList.prototype[DEFFN+eventType] = function (e) {","            var instance = this,","                readsync = (eventType===LOADAPPEND) ? READAPPEND : READ,","                options = e.options,","                errFunc, successFunc;","","            errFunc = function(err) {","                var facade = {","                    options: options,","                    error: err,","                    src: eventType","                };","                instance._lazyFireErrorEvent(facade);","                e.promiseReject(new Error(err));","            };","            successFunc = function(response) {","                var parsed;","                e.response = response;","                parsed = PARSED(response);","                if (parsed.responseText) {","                    // XMLHttpRequest","                    parsed = parsed.responseText;","                }","                e.parsed = parsed;","                //options.append is for compatiblility with previous versions","                // where you could call: loadPromise({append: true});","                if ((eventType===LOADAPPEND) || options.append) {","                    instance.add(parsed, options);","                }","                else {","                    instance.reset(parsed, options);","                }","                e.promiseResolve(response);","            };","            if (instance.syncPromise) {","                // use the syncPromise-layer","                instance._syncTimeoutPromise(readsync, options).then(","                    successFunc,","                    errFunc","                );","            }","            else {","                instance.sync(readsync, options, function (err, response) {","                    if (err) {","                        errFunc(err);","                    }","                    else {","                        successFunc(response);","                    }","                });","            }","            return e.promise;","        };","    }",");","","/**"," * Saves all modified models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all modified Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual save"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," *"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," *"," * @method _defFn_save"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SAVE] = function(e) {","    var instance = this,","        savelist = [],","        options = e.options;","    instance.each(","        function(model) {","            if (model.isModified()) {","                savelist.push(model.savePromise(options));","            }","        }","    );","    Y.batch.apply(Y, savelist).then(","//            Y.Promise.every(savelist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Submits all models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual submit"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful submit operation will fire an `error` event with the `src` value \"submit\"."," *"," * @method _defFn_submit"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SUBMIT] = function(e) {","    var instance = this,","        submitlist = [],","        options = e.options;","","    instance.each(","        function(model) {","/*jshint expr:true */","            model.submitPromise && submitlist.push(model.submitPromise(options));","/*jshint expr:false */","        }","    );","    Y.batch.apply(Y, submitlist).then(","//            Y.Promise.every(submitlist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Fires the ERROR-event and -if not published yet- publish it broadcasted to Y."," * Because the error-event is broadcasted to Y, it can be catched by gallery-itsaerrorreporter."," *"," * @method _lazyFireErrorEvent"," * @param {Object} [facade] eventfacade."," * @private","**/","YModelList.prototype._lazyFireErrorEvent = function(facade) {","    var instance = this;","","    // lazy publish","    if (!instance._errorEvent) {","        instance._errorEvent = instance.publish(ERROR, {","            broadcast: 1","        });","    }","    instance.fire(ERROR, facade);","};","","/**","   * Hack with the help of Luke Smith: https://gist.github.com/lsmith/6664382/d688740bb91f9ecfc3c89456a82f30d35c5095cb","   * Variant of publish(), but works with asynchronious defaultFn and preventedFn.","   *","   * Creates a new custom event of the specified type.  If a custom event","   * by that name already exists, it will not be re-created.  In either","   * case the custom event is returned.","   *","   * @method _publishAsync","   *","   * @param type {String} the type, or name of the event","   * @param opts {object} optional config params.  Valid properties are:","   *","   *  <ul>","   *    <li>","   *   'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)","   *    </li>","   *    <li>","   *   'bubbles': whether or not this event bubbles (true)","   *              Events can only bubble if emitFacade is true.","   *    </li>","   *    <li>","   *   'context': the default execution context for the listeners (this)","   *    </li>","   *    <li>","   *   'defaultFn': the default function to execute when this event fires if preventDefault was not called","   *    </li>","   *    <li>","   *   'emitFacade': whether or not this event emits a facade (false)","   *    </li>","   *    <li>","   *   'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'","   *    </li>","   *    <li>","   *   'fireOnce': if an event is configured to fire once, new subscribers after","   *   the fire will be notified immediately.","   *    </li>","   *    <li>","   *   'async': fireOnce event listeners will fire synchronously if the event has already","   *    fired unless async is true.","   *    </li>","   *    <li>","   *   'preventable': whether or not preventDefault() has an effect (true)","   *    </li>","   *    <li>","   *   'preventedFn': a function that is executed when preventDefault is called","   *    </li>","   *    <li>","   *   'queuable': whether or not this event can be queued during bubbling (false)","   *    </li>","   *    <li>","   *   'silent': if silent is true, debug messages are not provided for this event.","   *    </li>","   *    <li>","   *   'stoppedFn': a function that is executed when stopPropagation is called","   *    </li>","   *","   *    <li>","   *   'monitored': specifies whether or not this event should send notifications about","   *   when the event has been attached, detached, or published.","   *    </li>","   *    <li>","   *   'type': the event type (valid option if not provided as the first parameter to publish)","   *    </li>","   *  </ul>","   *","   *  @private","   *  @return {CustomEvent} the custom event","   *","  **/","YModelList.prototype._publishAsync = function(type, opts) {","    var instance = this,","        asyncEvent = instance.publish(type, opts);","","/*jshint expr:true */","    opts && (opts.broadcast===1) && instance.addTarget(Y);","    opts && (opts.broadcast===2) && instance.addTarget(YUI);","/*jshint expr:false */","    asyncEvent._firing = new Y.Promise(function (resolve) { resolve(); });","","    asyncEvent.fire = function (data) {","        var args  = Y.Array(arguments, 0, true),","            stack, next;","","        asyncEvent._firing = asyncEvent._firing.then(function () {","            stack = {","                id: asyncEvent.id,","                next: asyncEvent,","                silent: asyncEvent.silent,","                stopped: 0,","                prevented: 0,","                bubbling: null,","                type: asyncEvent.type,","                defaultTargetOnly: asyncEvent.defaultTargetOnly","            };","            asyncEvent.details = args;","            // Execute on() subscribers","            var subs = asyncEvent._subscribers,","                args2 = [],","                e, i, len;","","                args2.push.apply(args2, data);","                e = asyncEvent._createFacade(args2);","","            e.target = e.target || instance;","            if (subs) {","                for (i = 0, len = subs.length; i < len; ++i) {","                    try {","                        subs[i].fn.call(subs[i].context, e);","                    }","                    catch (catchErr) {","                    }","                }","            }","            // Execute on() subscribers for each bubble target and their respective targets:","            if (asyncEvent.bubbles && !asyncEvent.stopped) {","                instance.bubble(asyncEvent, args, null, stack);","                e.prevented = Math.max(e.prevented, stack.prevented);","            }","","            // Resolve the _firing promise with either prefentedFn promise if it was prevented, or with a promise for","            // the result of the defaultFn followed by the execution of the after subs.","            return e.prevented ?","                asyncEvent.preventedFn.call(instance, e).then(null, function (reason) {","                    return false;","                }) :","                asyncEvent.defaultFn.call(instance, e).then(function () {","                    // no need to handle 'response' it is merged into 'e' within the defaultfunction","                    // Execute after() subscribers","","                    subs = asyncEvent._afters;","                    if (subs) {","                        for (i = 0, len = subs.length; i < len; ++i) {","                            try {","                                subs[i].fn.call(subs[i].context, e);","                            }","                            catch (catchErr) {","                            }","                        }","                    }","                    // Execute after() subscribers for each bubble target and their respective targets:","                    if (stack.afterQueue) {","                        while ((next = stack.afterQueue.last())) {","                            next();","                        }","                    }","","                // Catch errors/preventions and reset the promise state to fulfilled for","                // the next call to fire();","                }).then(null, function (reason) {","                    return false;","                });","        },","        function(reason) {","            var facade = {","                error   : (reason && (reason.message || reason)),","                src     : 'ModelList._publishAsync()'","            };","            instance._lazyFireErrorEvent(facade);","        });","    };","","    asyncEvent._fire = function (args) {","        return asyncEvent.fire(args[0]);","    };","    return asyncEvent;","};","","/**"," * Prevented defaultFn as a Promise. Makes internal e.promise to be rejected."," *"," * @method _prevDefFn"," * @param e {EventTarget}"," * @param e.promise {Y.Promise} promise passed by with the eventobject"," * @param e.promiseReject {Function} handle to the reject-method"," * @param e.promiseResolve {Function} handle to the resolve-method"," * @private"," * @since 0.3","*/","YModelList.prototype._prevDefFn = function(e) {","    e.promiseReject(new Error('preventDefaulted'));","};","","/**"," * This method is used internally and returns syncPromise() that is called with 'action'."," * If 'action' is not handled as a Promise -inside syncPromise- then this method will reject the promisi."," *"," * @method _syncTimeoutPromise"," * @param action {String} The sync-action to perform."," * @param [options] {Object} Sync options. The custom synclayer should pass through all options-properties to the server."," * @return {Y.Promise} returned response for each 'action' --> response --> resolve(dataobject) OR reject(reason)."," * The returned 'dataobject' might be an object or a string that can be turned into a json-object"," * @private"," * @since 0.2","*/","YModelList.prototype._syncTimeoutPromise = function(action, options) {","    var instance = this,","          syncpromise;","","    syncpromise = instance.syncPromise(action, options);","    if (!(syncpromise instanceof Y.Promise)) {","        syncpromise = new Y.Promise(function (resolve, reject) {","            var errormessage = 'syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';","            reject(new Error(errormessage));","        });","    }","    return syncpromise;","};","","// for backwards compatibility:","YModelList.prototype.destroyPromise = YModelList.prototype.destroyModelPromise;","","}, '@VERSION@', {","    \"requires\": [","        \"yui-base\",","        \"base-base\",","        \"base-build\",","        \"node-base\",","        \"json-parse\",","        \"promise\",","        \"model\",","        \"model-list\",","        \"gallery-itsamodelsyncpromise\",","        \"gallery-itsamodulesloadedpromise\"","    ]","});","","}());"]};
}
var __cov_3GKoR$ZYrmGv8l73dddnpQ = __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'];
__cov_3GKoR$ZYrmGv8l73dddnpQ.s['1']++;YUI.add('gallery-itsamodellistsyncpromise',function(Y,NAME){'use strict';__cov_3GKoR$ZYrmGv8l73dddnpQ.f['1']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['2']++;var YModelList=Y.ModelList,Lang=Y.Lang,YArray=Y.Array,YObject=Y.Object,PUBLISHED='_pub_',READ='read',APPEND='append',DELETE='delete',READAPPEND=READ+APPEND,MODELSYNC='modelsync',GALLERY_ITSA='gallery-itsa',GALLERYITSAMODELSYNCPROMISE=GALLERY_ITSA+MODELSYNC+'promise',AVAILABLESYNCMESSAGES={load:true,save:true,submit:true,destroy:true},DEFFN='_defFn_',ERROR='error',SAVE='save',SUBMIT='submit',LOAD='load',LOADAPPEND=LOAD+APPEND,DESTROY='destroy',DESTROYMODELS=DESTROY+'models',PROMISE='Promise',PARSED=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['2']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['3']++;if(typeof response==='string'){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['4']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['5']++;return Y.JSON.parse(response);}catch(ex){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['6']++;this.fire(ERROR,{error:ex,response:response,src:'parse'});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['7']++;return{};}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['8']++;return(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][0]++,response)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][1]++,{});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['9']++;YModelList.prototype.addMessageTarget=function(itsamessageviewer){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['3']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['10']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['11']++;Y.usePromise(GALLERY_ITSA+'messagecontroller',GALLERY_ITSA+'messageviewer',GALLERY_ITSA+'panel',GALLERY_ITSA+'viewmodel').then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['4']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['12']++;return Y.ITSAMessageController.isReady();}).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['5']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['13']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][0]++,itsamessageviewer instanceof Y.ITSAPanel)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][1]++,itsamessageviewer=itsamessageviewer._itsastatusbar);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['14']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][0]++,itsamessageviewer)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][1]++,itsamessageviewer instanceof Y.ITSAViewModel)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][2]++,itsamessageviewer=itsamessageviewer._itsastatusbar);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['15']++;if(itsamessageviewer instanceof Y.ITSAMessageViewer){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['16']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][0]++,instance._itsamessageListener)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][1]++,instance.removeMessageTarget());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['17']++;instance._itsamessageListener=instance.on([LOAD,SUBMIT,SAVE,DESTROY],function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['6']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['18']++;var options=e.options,remove=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][0]++,options.remove)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][1]++,options[DELETE]),type=e.type,typesplit=type.split(':'),subtype=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][0]++,typesplit[1])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][1]++,typesplit[0]),statushandle,syncMessages;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['19']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][0]++,subtype!==DESTROY)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][1]++,remove)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['20']++;syncMessages=instance._defSyncMessages;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['21']++;statushandle=itsamessageviewer.showStatus((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][0]++,e.syncmessage)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][1]++,syncMessages)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][2]++,syncMessages[subtype])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][3]++,Y.Intl.get(GALLERYITSAMODELSYNCPROMISE)[subtype]),{source:MODELSYNC,busy:true});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['22']++;e.promise.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['7']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['23']++;itsamessageviewer.removeStatus(statushandle);},function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['8']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['24']++;itsamessageviewer.removeStatus(statushandle);});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['25']++;instance._itsamessagedestroylistener1=instance.onceAfter(DESTROY,function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['9']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['26']++;instance._itsamessageListener.detach();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['27']++;instance._itsamessagedestroylistener2=itsamessageviewer.once(DESTROY,function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['10']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['28']++;instance._itsamessageListener.detach();});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][1]++;}});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['29']++;YArray.each([LOAD,LOADAPPEND,SAVE,SUBMIT,DESTROYMODELS],function(Fn){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['11']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['30']++;YModelList.prototype[Fn]=function(options,callback){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['12']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['31']++;var instance=this,promise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['32']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][0]++,promise=instance[Fn+PROMISE](options))&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][1]++,callback)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][2]++,promise.then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['13']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['33']++;callback(null,response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['14']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['34']++;callback(err);}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['35']++;return instance;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['36']++;YModelList.prototype[Fn+PROMISE]=function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['15']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['37']++;return this._createPromise(Fn,options);};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['38']++;YModelList.prototype.removeMessageTarget=function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['16']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['39']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['40']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][0]++,instance._itsamessageListener)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][1]++,instance._itsamessageListener.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['41']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][0]++,instance._itsamessagedestroylistener1)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][1]++,instance._itsamessagedestroylistener1.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['42']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][0]++,instance._itsamessagedestroylistener2)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][1]++,instance._itsamessagedestroylistener2.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['43']++;instance._itsamessageListener=null;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['44']++;YModelList.prototype.setSyncMessage=function(type,message){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['17']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['45']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['46']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][0]++,instance._defSyncMessages)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][1]++,instance._defSyncMessages={});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['47']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][0]++,AVAILABLESYNCMESSAGES[type])&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][1]++,instance._defSyncMessages[type]=message);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['48']++;return instance;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['49']++;YModelList.prototype._createPromise=function(type,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['18']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['50']++;var instance=this,promise,promiseResolve,promiseReject,extraOptions;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['51']++;promise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['19']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['52']++;promiseResolve=resolve;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['53']++;promiseReject=reject;});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['54']++;extraOptions={promise:promise,promiseResolve:promiseResolve,promiseReject:promiseReject,response:'',parsed:{},options:Y.merge(options)};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['55']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][0]++,Lang.isObject(options))&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][1]++,YObject.each(options,function(value,key){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['20']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['56']++;extraOptions[key]=value;}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['57']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][0]++,instance[PUBLISHED+type])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][1]++,instance[PUBLISHED+type]=instance._publishAsync(type,{defaultTargetOnly:true,emitFacade:true,broadcast:1,defaultFn:instance[DEFFN+type],preventedFn:instance._prevDefFn}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['58']++;instance.fire(type,extraOptions);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['59']++;return promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['60']++;YModelList.prototype[DEFFN+DESTROYMODELS]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['21']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['61']++;var instance=this,destroylist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['62']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['22']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['63']++;destroylist.push(model.destroyPromise(options));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['64']++;Y.batch.apply(Y,destroylist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['23']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['65']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['24']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['66']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['67']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['68']++;YArray.each([LOAD,LOADAPPEND],function(eventType){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['25']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['69']++;YModelList.prototype[DEFFN+eventType]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['26']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['70']++;var instance=this,readsync=eventType===LOADAPPEND?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][0]++,READAPPEND):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][1]++,READ),options=e.options,errFunc,successFunc;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['71']++;errFunc=function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['27']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['72']++;var facade={options:options,error:err,src:eventType};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['73']++;instance._lazyFireErrorEvent(facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['74']++;e.promiseReject(new Error(err));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['75']++;successFunc=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['28']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['76']++;var parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['77']++;e.response=response;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['78']++;parsed=PARSED(response);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['79']++;if(parsed.responseText){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['80']++;parsed=parsed.responseText;}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['81']++;e.parsed=parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['82']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][0]++,eventType===LOADAPPEND)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][1]++,options.append)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['83']++;instance.add(parsed,options);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['84']++;instance.reset(parsed,options);}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['85']++;e.promiseResolve(response);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['86']++;if(instance.syncPromise){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['24'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['87']++;instance._syncTimeoutPromise(readsync,options).then(successFunc,errFunc);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['24'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['88']++;instance.sync(readsync,options,function(err,response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['29']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['89']++;if(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['90']++;errFunc(err);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['91']++;successFunc(response);}});}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['92']++;return e.promise;};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['93']++;YModelList.prototype[DEFFN+SAVE]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['30']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['94']++;var instance=this,savelist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['95']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['31']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['96']++;if(model.isModified()){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['97']++;savelist.push(model.savePromise(options));}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['98']++;Y.batch.apply(Y,savelist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['32']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['99']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['33']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['100']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['101']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['102']++;YModelList.prototype[DEFFN+SUBMIT]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['34']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['103']++;var instance=this,submitlist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['104']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['35']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['105']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['27'][0]++,model.submitPromise)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['27'][1]++,submitlist.push(model.submitPromise(options)));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['106']++;Y.batch.apply(Y,submitlist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['36']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['107']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['37']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['108']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['109']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['110']++;YModelList.prototype._lazyFireErrorEvent=function(facade){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['38']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['111']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['112']++;if(!instance._errorEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['113']++;instance._errorEvent=instance.publish(ERROR,{broadcast:1});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['114']++;instance.fire(ERROR,facade);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['115']++;YModelList.prototype._publishAsync=function(type,opts){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['39']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['116']++;var instance=this,asyncEvent=instance.publish(type,opts);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['117']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][0]++,opts)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][1]++,opts.broadcast===1)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][2]++,instance.addTarget(Y));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['118']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][0]++,opts)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][1]++,opts.broadcast===2)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][2]++,instance.addTarget(YUI));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['119']++;asyncEvent._firing=new Y.Promise(function(resolve){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['40']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['120']++;resolve();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['121']++;asyncEvent.fire=function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['41']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['122']++;var args=Y.Array(arguments,0,true),stack,next;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['123']++;asyncEvent._firing=asyncEvent._firing.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['42']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['124']++;stack={id:asyncEvent.id,next:asyncEvent,silent:asyncEvent.silent,stopped:0,prevented:0,bubbling:null,type:asyncEvent.type,defaultTargetOnly:asyncEvent.defaultTargetOnly};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['125']++;asyncEvent.details=args;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['126']++;var subs=asyncEvent._subscribers,args2=[],e,i,len;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['127']++;args2.push.apply(args2,data);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['128']++;e=asyncEvent._createFacade(args2);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['129']++;e.target=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['31'][0]++,e.target)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['31'][1]++,instance);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['130']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['32'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['131']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['132']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['133']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['32'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['134']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][0]++,asyncEvent.bubbles)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][1]++,!asyncEvent.stopped)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['33'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['135']++;instance.bubble(asyncEvent,args,null,stack);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['136']++;e.prevented=Math.max(e.prevented,stack.prevented);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['33'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['137']++;return e.prevented?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['35'][0]++,asyncEvent.preventedFn.call(instance,e).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['43']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['138']++;return false;})):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['35'][1]++,asyncEvent.defaultFn.call(instance,e).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['44']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['139']++;subs=asyncEvent._afters;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['140']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['36'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['141']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['142']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['143']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['36'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['144']++;if(stack.afterQueue){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['37'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['145']++;while(next=stack.afterQueue.last()){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['146']++;next();}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['37'][1]++;}}).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['45']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['147']++;return false;}));},function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['46']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['148']++;var facade={error:(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['38'][0]++,reason)&&((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['38'][1]++,reason.message)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['38'][2]++,reason)),src:'ModelList._publishAsync()'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['149']++;instance._lazyFireErrorEvent(facade);});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['150']++;asyncEvent._fire=function(args){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['47']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['151']++;return asyncEvent.fire(args[0]);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['152']++;return asyncEvent;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['153']++;YModelList.prototype._prevDefFn=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['48']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['154']++;e.promiseReject(new Error('preventDefaulted'));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['155']++;YModelList.prototype._syncTimeoutPromise=function(action,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['49']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['156']++;var instance=this,syncpromise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['157']++;syncpromise=instance.syncPromise(action,options);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['158']++;if(!(syncpromise instanceof Y.Promise)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['39'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['159']++;syncpromise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['50']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['160']++;var errormessage='syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';__cov_3GKoR$ZYrmGv8l73dddnpQ.s['161']++;reject(new Error(errormessage));});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['39'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['162']++;return syncpromise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['163']++;YModelList.prototype.destroyPromise=YModelList.prototype.destroyModelPromise;},'@VERSION@',{'requires':['yui-base','base-base','base-build','node-base','json-parse','promise','model','model-list','gallery-itsamodelsyncpromise','gallery-itsamodulesloadedpromise']});
