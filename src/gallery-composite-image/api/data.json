{
    "project": {
        "name": "Composite-Image",
        "description": "Object to handle raw multidimensional multichannel image data."
    },
    "files": {
        "js/composite-image.js": {
            "name": "js/composite-image.js",
            "modules": {
                "gallery-composite-image": 1
            },
            "classes": {
                "Composite.Image": 1
            },
            "fors": {},
            "namespaces": {
                "Composite": 1
            }
        }
    },
    "modules": {
        "gallery-composite-image": {
            "name": "gallery-composite-image",
            "submodules": {},
            "classes": {
                "Composite.Image": 1
            },
            "fors": {},
            "namespaces": {
                "Composite": 1
            },
            "tag": "module",
            "file": "js/composite-image.js",
            "line": 4
        }
    },
    "classes": {
        "Composite.Image": {
            "name": "Composite.Image",
            "shortname": "Composite.Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-composite-image",
            "namespace": "Composite",
            "file": "js/composite-image.js",
            "line": 15,
            "description": "Image Class",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration Object.",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "js/composite-image.js",
            "line": 29,
            "description": "Defines the color space for the image.\n\nAn image can have as many channels as needed.  3 or 4 channels is\nmost common.  Usually the first channel is the red color component,\nthe second is green, the third is blue, and the fourth is alpha.\n\nThere are various ways to represent the value of a channel.\nValues can either be stored as integers or floating-point numbers.\nValues may be constrained within a minimum and maximum value.\n\nMost commonly red, green, and blue channels are represented by\nintegers between 0 and 255.  In this case the values 0, 0, 0\nrepresent black and the values 255, 255, 255 represent white.\n\nThe alpha channel is commonly stored as a floating-point value from 0\nto 1.  1 represents a completely visible pixel while 0 is completely\ntransparent.\n\nValues are not required to be constrained.  For example, sometimes it\nis interesting or useful to store colors which have brightness beyond\nwhite.\n\nThis attribute should be set to an array of objects.  This array\nrepresents the channels in order.  This array should have at least\none element.  This should not be a sparse array.  Each object must\nhave a mode property.  The mode property must be set to either 'f'\nfor floating-point values or 'i' for integer values.  Each object may\ninclude the optional maximum and/or minimum properties.  Each object\nmay include the optional blackValue and/or whiteValue properties.  If\nundefined, blackValue will default to 0 and whiteValue will default\nto 255 when mode is set to 'i' or 1 otherwise.",
            "itemtype": "attribute",
            "name": "channels",
            "default": "[\n    {maximum: 255, minimum: 0, mode:'i'},\n    {maximum: 255, minimum: 0, mode:'i'},\n    {maximum: 255, minimum: 0, mode:'i'},\n    {maximum: 1, minimum: 0, mode:'f'}\n]",
            "type": "Array",
            "writeonce": "",
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 92,
            "description": "Defines the pixel dimensions of the image.\n\nAn image can have as many dimensions as needed.  2 dimensions is most\ncommon.  Usually the first dimension is width and the second is\nheight.",
            "itemtype": "attribute",
            "name": "dimensions",
            "default": "[512, 512]",
            "type": "Array",
            "writeonce": "",
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 111,
            "description": "Contains the number of pixels in the image.",
            "itemtype": "attribute",
            "name": "pixelCount",
            "readonly": "",
            "type": "Number",
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 125,
            "description": "Clears the image.\nThis method is chainable.",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 141,
            "description": "Returns a new identical image.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 157,
            "description": "Invokes a function for each pixel in the image.\nThis method is chainable.",
            "itemtype": "method",
            "name": "eachPixel",
            "chainable": 1,
            "params": [
                {
                    "name": "pixelParameters",
                    "description": "This object contains the following\nmembers\n<ul>\n    <li>\n        ctx - Object - Optional scope with which to call fn.\n    </li>\n    <li>\n        fn - Function - This function is invoked once per pixel.\n        This function will receive an object with the following\n        parameters\n        <ul>\n            <li>\n                at - Array of image pixel coordinates.\n            </li>\n            <li>\n                chs - Array of image channel definitions.\n            </li>\n            <li>\n                dims - Array of image dimension lengths.\n            </li>\n            <li>\n                img - Reference to this image.\n            </li>\n            <li>\n                pch - Array of pixel channel indices.\n            </li>\n            <li>\n                pcnt - Number of pixels in this image.\n            </li>\n            <li>\n                pix - Integer index of this pixel.\n            </li>\n            <li>\n                pxl - Array of pixel channel values.\n            </li>\n        </ul>\n        If this function returns true, eachPixel will stop and ignore\n        the remaining pixels.\n    </li>\n    <li>\n        pch - Array - Optional array of channel indexes.  If\n        undefined, pixels will contain all channels in order.\n    </li>\n</ul>",
                    "type": "Object"
                },
                {
                    "name": "callbackFunction",
                    "description": "This function is invoked after the\nfunction has been invoked for each pixel in the image.  This function\nwill receive an object with the following members\n<ul>\n    <li>\n        chs - Array of image channel definitions.\n    </li>\n    <li>\n        dims - Array of image dimension lengths.\n    </li>\n    <li>\n        img - Reference to this image.\n    </li>\n    <li>\n        pcnt - Number of pixels in this image.\n    </li>\n    <li>\n        pix - The last integer pixel index processed.  If eachPixel\n        was not stopped early, this value should be equal to pcnt and\n        not a valid pixel index.\n    </li>\n</ul>",
                    "type": "Function"
                },
                {
                    "name": "contextObject",
                    "description": "Optional scope with which to call the\ncallback function.",
                    "type": "Object"
                }
            ],
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 286,
            "description": "Converts a pixel index to an at array.",
            "itemtype": "method",
            "name": "getAt",
            "params": [
                {
                    "name": "pixelIndex",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 295,
            "description": "Accessor method to get a pixel from the image.",
            "itemtype": "method",
            "name": "getPixel",
            "params": [
                {
                    "name": "at",
                    "description": "Array containing pixel coordinates.  The length of\nthis array should match the number of dimensions of the image.",
                    "type": "Array"
                },
                {
                    "name": "pixelChannels",
                    "description": "Optional array of channel indexes.  If\nundefined, returned pixel will contain all channels in order.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 329,
            "description": "Converts an at array to a pixel index.",
            "itemtype": "method",
            "name": "getPixelIndex",
            "params": [
                {
                    "name": "at",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 373,
            "description": "Accessor method to set a pixel in the image.\nThis method is chainable.",
            "itemtype": "method",
            "name": "setPixel",
            "chainable": 1,
            "params": [
                {
                    "name": "at",
                    "description": "Array containing pixel coordinates.  The length of\nthis array should match the number of dimensions of the image.",
                    "type": "Array"
                },
                {
                    "name": "pixel",
                    "description": "Array containing the pixel's channel values.",
                    "type": "Array"
                },
                {
                    "name": "pixelChannels",
                    "description": "Optional array of channel indexes.  If\nundefined, the given pixel is assumed to contain all channels in\norder.",
                    "type": "Array"
                }
            ],
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 410,
            "description": "Conforms the given value to the channel's specifications.",
            "itemtype": "method",
            "name": "conformChannelValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "channel",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "static": 1,
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 437,
            "description": "Call this function with the length of each dimension followed by the\nnumber of channels.  Returns a function which accepts a pixel index and\nreturns an at array.",
            "itemtype": "method",
            "name": "_getGetAtFunction",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Function"
            },
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        },
        {
            "file": "js/composite-image.js",
            "line": 473,
            "description": "Call this function with the length of each dimension.\nReturns a function which accepts dimension indices and returns a pixel\nindex.",
            "itemtype": "method",
            "name": "_getGetPixelIndexFunction",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Function"
            },
            "class": "Composite.Image",
            "module": "gallery-composite-image",
            "namespace": "Composite"
        }
    ]
}